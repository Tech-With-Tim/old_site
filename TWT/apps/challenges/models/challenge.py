from django.db import models
from django.contrib.auth.models import User
from martor.models import MartorField
import re
from django.core.validators import RegexValidator


class Challenge(models.Model):
    id = models.AutoField(
        primary_key=True,
        help_text="A challenge ID, automatically generated by Postgres.",
    )

    class ChallengeType(models.TextChoices):
        WEEKLY = "WE", "Weekly"
        MONTHLY = "MO", "Monthly"

    class ChallengeStatus(models.TextChoices):
        NOT_POSTED = "NOT POSTED"
        ONGOING = "RUNNING"
        ENDED = "ENDED"

    def __str__(self):
        return f"{self.title} {self.type} Challenge"

    status = models.TextField(
        max_length=10,
        choices=ChallengeStatus.choices,
        default=ChallengeStatus.NOT_POSTED,
        help_text="The challenge status",
    )

    type = models.CharField(
        max_length=2,
        choices=ChallengeType.choices,
        default=ChallengeType.WEEKLY,
        help_text="The type of challenge this is, either weekly(WE) or monthly(MO).",
    )

    title = models.TextField(max_length=25, help_text="The challenge title.")

    short_desc = models.TextField(
        max_length=100, help_text="A summary of the full challenge description."
    )

    description = MartorField()

    rules = models.TextField(
        max_length=512, help_text="A set of rules for this challenge."
    )

    author = models.ForeignKey(
        User, on_delete=models.CASCADE, help_text="The challenge author."
    )
    created_at = models.DateTimeField(auto_now=True)
    posted = models.BooleanField(default=False)
    ended = models.BooleanField(default=False)
    posted_at = models.DateTimeField(null=True, blank=True, default=None)
    submissions_status = models.BooleanField(default=False)
    team_creation_status = models.BooleanField(default=False)
    voting_status = models.BooleanField(default=False)
    youtube_video_link = models.CharField(max_length=43, null=True, blank=True, validators=[
        RegexValidator(
            regex=re.compile(
                r"^(https?\:\/\/)?(www\.)?(youtube\.com)\/.+$"
            )
        )
    ],)

    @property
    def active(self):
        return self.posted and not self.ended

    def get_video_embed_link(self) -> str:
        return f"https://youtube.com/embed/{self.youtube_video_link.split('=')[1]}"
